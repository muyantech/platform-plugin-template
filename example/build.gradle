import groovy.json.JsonOutput

import java.nio.file.Files

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.1/userguide/building_java_projects.html
 */

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.harbby:gradle-serviceloader:1.1.8"
  }
}

plugins {
  // Apply the java-library plugin for API and implementation separation.
  id 'java-library'
  id 'groovy'
  id 'idea'
}
apply plugin: "com.github.harbby.gradle.serviceloader"

version "0.0.1"
group "tech.muyan.plugin"

def muyanPluginName = "DemoPlugin"
def muyanPluginVersion = project.version
def description = "Demo Plugin"
def dependsOnPlugins = [
  "PlatformAdapter": "0.0.1",
]

repositories {
  mavenLocal()
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit test framework.
  testImplementation 'junit:junit:4.13.2'

  compileOnly 'tech.muyan:api:0.0.1'
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
  withSourcesJar()
}

serviceLoader {
  serviceInterface 'tech.muyan.api.MuyanPlatformComponent'
}

jar {
  manifest {
    attributes(
      'Muyan-Plugin-Name': muyanPluginName,
      'Muyan-Plugin-Version': muyanPluginVersion,
    )
  }
}

String workingFolder = "$buildDir/tmp/muyan-plugin"
def workingFolderFile = file(workingFolder)
if (Files.exists(workingFolderFile.toPath())) {
  delete workingFolderFile
}
mkdir workingFolder

tasks.register("generateMuyanPluginInfo") {
  Map pluginInfo = [
    name: muyanPluginName,
    version: muyanPluginVersion,
    dependsOnPlugins: dependsOnPlugins,
    description: description,
  ]
  File pluginInfoFile = file("$workingFolder/PLUGIN_INFO")
  pluginInfoFile.text = JsonOutput.toJson(pluginInfo)
}

tasks.register("packageMuyanPlugin", Zip) {
  dependsOn "jar", "build", "generateMuyanPluginInfo"
  String targetFolder = "$buildDir/muyan-plugin"
  mkdir targetFolder
  archiveName "$muyanPluginName-${muyanPluginVersion}.myp"
  destinationDir(file(targetFolder))
  from "$workingFolder/"
  include '*'
  include '*/*'
  doFirst {
    copy {
      into("$workingFolder/libs")
      from(project.configurations.runtimeClasspath, jar.archiveFile)
    }
  }
}